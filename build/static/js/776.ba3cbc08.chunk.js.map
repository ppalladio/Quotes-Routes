{"version":3,"file":"static/js/776.ba3cbc08.chunk.js","mappings":"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","sources":["webpack://quote-routes/./src/components/comments/Comments.module.css?d88e","webpack://quote-routes/./src/components/comments/NewCommentForm.module.css?81c1","components/comments/NewCommentForm.js","webpack://quote-routes/./src/components/comments/CommentItem.module.css?204f","components/comments/CommentItem.js","webpack://quote-routes/./src/components/comments/CommentsList.module.css?06d6","components/comments/CommentsList.js","components/comments/Comments.js","webpack://quote-routes/./src/components/quotes/HighlightedQuote.module.css?c98c","components/quotes/HighlightedQuote.js","pages/QuoteDetails.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"comments\":\"Comments_comments__0qAYF\"};","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"NewCommentForm_form__R0uz4\",\"loading\":\"NewCommentForm_loading__2i4aw\",\"control\":\"NewCommentForm_control__XzQJp\",\"actions\":\"NewCommentForm_actions__IuI3g\"};","import { useRef, useEffect } from 'react';\nimport useHttp from '../../hooks/use-http';\nimport { addComment } from '../../lib/api';\nimport classes from './NewCommentForm.module.css';\nimport LoadingSpinner from '../UI/LoadingSpinner';\n\nconst NewCommentForm = (props) => {\n    const commentTextRef = useRef();\n    const { sendRequest, status, error } = useHttp(addComment);\n    const { onAddedComment } = props;\n    useEffect(() => {\n      if (status === 'completed' && !error) {\n        onAddedComment();\n      }\n    }, [status, error, onAddedComment]);\n\n    \n    \n    const submitFormHandler = (event) => {\n        event.preventDefault();\n        const enteredText = commentTextRef.current.value;\n    sendRequest({ commentData: { text: enteredText }, quoteId: props.quoteId });\n  };\n\n    return (\n        <form className={classes.form} onSubmit={submitFormHandler}>\n             {status === 'pending' && (\n        <div className='centered'>\n          <LoadingSpinner />\n        </div>\n      )}\n            <div className={classes.control} onSubmit={submitFormHandler}>\n                <label htmlFor=\"comment\">Your Comment</label>\n                <textarea id=\"comment\" rows=\"5\" ref={commentTextRef}></textarea>\n            </div>\n            <div className={classes.actions}>\n                <button className=\"btn\">Add Comment</button>\n            </div>\n        </form>\n    );\n};\n\nexport default NewCommentForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"CommentItem_item__qvR49\"};","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","// extracted by mini-css-extract-plugin\nexport default {\"comments\":\"CommentsList_comments__2neVM\"};","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useState, useEffect,useCallback } from 'react';\nimport useHttp from '../../hooks/use-http';\nimport classes from './Comments.module.css';\nimport NewCommentForm from './NewCommentForm';\nimport { getAllComments } from '../../lib/api';\nimport { useParams } from 'react-router-dom';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport Commentslist from './CommentsList';\nconst Comments = () => {\n    const [isAddingComment, setIsAddingComment] = useState(false);\n    const params = useParams()\n    const { quoteId } = params;\n\n    const {\n        sendRequest,\n        status,\n        data: loadedComments,\n    } = useHttp(getAllComments);\n\n    const startAddCommentHandler = () => {\n        setIsAddingComment(true);\n    };\n    \n\n    useEffect(() => {\n        sendRequest(quoteId);\n    }, [quoteId, sendRequest]);\n\n    let comments;\n\n\n    if (status === 'pending') {\n        comments = (\n            <div className=\"centered\">\n                <LoadingSpinner />\n            </div>\n        );\n    }\n\n    if (status === 'completed' && loadedComments && loadedComments.length > 0) {\n        comments = <Commentslist comments={loadedComments} />;\n    }\n\n    if (\n        status === 'completed' &&\n        (!loadedComments || loadedComments.length === 0)\n    ) {\n        comments = <p className=\"centered\">No comments were added yet!</p>;\n    }\n\n    const addedCommentHandler = useCallback(() => {\n      sendRequest(quoteId);\n    }, [sendRequest, quoteId]);\n    return (\n        <section className={classes.comments}>\n            <h2>User Comments</h2>\n            {!isAddingComment && (\n                <button className=\"btn\" onClick={startAddCommentHandler}>\n                    Add a Comment\n                </button>\n            )}\n            {isAddingComment && (\n                <NewCommentForm quoteId={quoteId} onAddedComment ={addedCommentHandler} />\n            )}\n            {comments}\n        </section>\n    );\n};\n\nexport default Comments;\n","// extracted by mini-css-extract-plugin\nexport default {\"quote\":\"HighlightedQuote_quote__zLKoH\"};","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { useEffect } from 'react';\r\nimport { useParams, Route, Link, useRouteMatch } from 'react-router-dom';\r\nimport Comments from '../components/comments/Comments';\r\nimport HighlightedQuote from '../components/quotes/HighlightedQuote';\r\nimport useHttp from '../hooks/use-http';\r\nimport { getSingleQuote } from '../lib/api';\r\nimport LoadingSpinner from '../components/UI/LoadingSpinner';\r\n\r\n// const init = [\r\n//     {\r\n//         id: 'q1',\r\n//         author: 'Oscar Wilde',\r\n//         text: 'Be yourself; everyone else is already taken.',\r\n//     },\r\n//     {\r\n//         id: 'q2',\r\n//         author: 'Albert Einstein',\r\n//         text: \"Two things are infinite: the universe and human stupidity; and I'm not sure about the universe\",\r\n//     },\r\n//     {\r\n//         id: 'q3',\r\n//         author: 'Frank Zappa',\r\n//         text: 'So many books, so little time.',\r\n//     },\r\n// ];\r\nconst QuoteDetail = () => {\r\n    const match = useRouteMatch();\r\n    const params = useParams();\r\n    console.log(useParams());\r\n    const {\r\n        sendRequest,\r\n        status,\r\n        data: loadedQuote,\r\n        error,\r\n    } = useHttp(getSingleQuote, true);\r\n    const { quoteId } = params;\r\n    useEffect(() => {\r\n        sendRequest(quoteId);\r\n    }, [sendRequest, quoteId]);\r\n    if (status === 'pending') {\r\n        return (\r\n            <div className=\"centered\">\r\n                <LoadingSpinner />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (error) {\r\n        return { error };\r\n    }\r\n    if (!loadedQuote.text) {\r\n        return <p>No quote found!</p>;\r\n    }\r\n    // console.log(quote.text);\r\n    console.log(match);\r\n    return (\r\n        <>\r\n            <HighlightedQuote\r\n                text={loadedQuote.text}\r\n                author={loadedQuote.author}\r\n            />\r\n            <Route path={match.path} exact>\r\n                <div className=\"centered\">\r\n                    <Link className=\"btn--flat\" to={`${match.url}/comments`}>\r\n                        Load Comments\r\n                    </Link>\r\n                </div>\r\n            </Route>\r\n            <Route path={`${match.path}/comments`}>\r\n                <Comments />\r\n            </Route>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default QuoteDetail;\r\n"],"names":["props","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddedComment","useEffect","submitFormHandler","event","preventDefault","enteredText","current","value","commentData","text","quoteId","className","classes","onSubmit","LoadingSpinner","htmlFor","id","rows","ref","comments","map","comment","useState","isAddingComment","setIsAddingComment","useParams","getAllComments","loadedComments","data","length","addedCommentHandler","useCallback","onClick","author","match","useRouteMatch","params","console","log","getSingleQuote","loadedQuote","path","exact","to","url"],"sourceRoot":""}